# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:57:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AccountId(RootModel[constr(pattern=r'\d{12}', min_length=12, max_length=12)]):
    root: constr(pattern=r'\d{12}', min_length=12, max_length=12) = Field(
        ..., description='The ID of the Amazon Web Services account.'
    )


class AddressLine1(
    RootModel[constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=180)]
):
    root: constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=180)


class AddressLine2(
    RootModel[constr(pattern=r'^\S[\S ]*$', min_length=0, max_length=60)]
):
    root: constr(pattern=r'^\S[\S ]*$', min_length=0, max_length=60)


class AddressLine3(
    RootModel[constr(pattern=r'^\S[\S ]*$', min_length=0, max_length=60)]
):
    root: constr(pattern=r'^\S[\S ]*$', min_length=0, max_length=60)


class AddressType(Enum):
    SHIPPING_ADDRESS = 'SHIPPING_ADDRESS'
    OPERATING_ADDRESS = 'OPERATING_ADDRESS'


class Arn(
    RootModel[
        constr(
            pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:([a-z\d-]+)/)[a-z]{2,8}-[a-f0-9]{17}$',
            max_length=1011,
        )
    ]
):
    root: constr(
        pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:([a-z\d-]+)/)[a-z]{2,8}-[a-f0-9]{17}$',
        max_length=1011,
    )


class AssetId(RootModel[constr(pattern=r'^(\w+)$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^(\w+)$', min_length=1, max_length=100)


class AssetState(Enum):
    ACTIVE = 'ACTIVE'
    RETIRING = 'RETIRING'


class AssetType(Enum):
    COMPUTE = 'COMPUTE'


class AvailabilityZone(
    RootModel[
        constr(
            pattern=r'^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$',
            min_length=1,
            max_length=1000,
        )
    ]
):
    root: constr(
        pattern=r'^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$',
        min_length=1,
        max_length=1000,
    ) = Field(..., description='The Availability Zone.')


class AvailabilityZoneId(
    RootModel[
        constr(pattern=r'^[a-zA-Z]+\d-[a-zA-Z]+\d$', min_length=1, max_length=255)
    ]
):
    root: constr(pattern=r'^[a-zA-Z]+\d-[a-zA-Z]+\d$', min_length=1, max_length=255) = (
        Field(..., description='The ID of the Availability Zone.')
    )


class AvailabilityZoneIdList(RootModel[List[AvailabilityZoneId]]):
    root: List[AvailabilityZoneId] = Field(..., max_length=5, min_length=1)


class AvailabilityZoneList(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone] = Field(..., max_length=5, min_length=1)


class CIDR(
    RootModel[
        constr(
            pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$',
            min_length=9,
            max_length=18,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$', min_length=9, max_length=18
    )


class CIDRList(RootModel[List[CIDR]]):
    root: List[CIDR]


class CancelOrderInput(BaseModel):
    pass


class CancelOrderOutput(BaseModel):
    pass


class CatalogItemClass(Enum):
    RACK = 'RACK'
    SERVER = 'SERVER'


class CatalogItemClassList(RootModel[List[CatalogItemClass]]):
    root: List[CatalogItemClass]


class CatalogItemPowerKva(RootModel[float]):
    root: float


class CatalogItemStatus(Enum):
    AVAILABLE = 'AVAILABLE'
    DISCONTINUED = 'DISCONTINUED'


class CatalogItemWeightLbs(RootModel[int]):
    root: int


class City(RootModel[constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=50)


class CityList(RootModel[List[City]]):
    root: List[City]


class ComputeAssetState(Enum):
    ACTIVE = 'ACTIVE'
    ISOLATED = 'ISOLATED'
    RETIRING = 'RETIRING'


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionId(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9+/=]{1,1024}$', min_length=1, max_length=1024)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9+/=]{1,1024}$', min_length=1, max_length=1024)


class ContactName(
    RootModel[constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=255)]
):
    root: constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=255)


class ContactPhoneNumber(
    RootModel[constr(pattern=r'^[\S ]+$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^[\S ]+$', min_length=1, max_length=20)


class CountryCode(RootModel[constr(pattern=r'^[A-Z]{2}$', min_length=2, max_length=2)]):
    root: constr(pattern=r'^[A-Z]{2}$', min_length=2, max_length=2)


class CountryCodeList(RootModel[List[CountryCode]]):
    root: List[CountryCode]


class DeleteOutpostInput(BaseModel):
    pass


class DeleteOutpostOutput(BaseModel):
    pass


class DeleteSiteInput(BaseModel):
    pass


class DeleteSiteOutput(BaseModel):
    pass


class DeviceSerialNumber(
    RootModel[constr(pattern=r'^(\w+)$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^(\w+)$', min_length=1, max_length=100)


class DistrictOrCounty(
    RootModel[constr(pattern=r'^\S[\S ]*', min_length=1, max_length=60)]
):
    root: constr(pattern=r'^\S[\S ]*', min_length=1, max_length=60)


class Family(RootModel[constr(pattern=r'[a-z0-9]+', min_length=1, max_length=10)]):
    root: constr(pattern=r'[a-z0-9]+', min_length=1, max_length=10)


class FiberOpticCableType(Enum):
    SINGLE_MODE = 'SINGLE_MODE'
    MULTI_MODE = 'MULTI_MODE'


class GetCatalogItemInput(BaseModel):
    pass


class GetConnectionRequest(BaseModel):
    pass


class GetOrderInput(BaseModel):
    pass


class GetOutpostInput(BaseModel):
    pass


class GetOutpostInstanceTypesInput(BaseModel):
    pass


class GetSiteAddressInput(BaseModel):
    pass


class GetSiteInput(BaseModel):
    pass


class HostId(
    RootModel[constr(pattern=r'^[A-Za-z0-9-]*$', min_length=1, max_length=50)]
):
    root: constr(pattern=r'^[A-Za-z0-9-]*$', min_length=1, max_length=50)


class HostIdList(RootModel[List[HostId]]):
    root: List[HostId]


class ISO8601Timestamp(RootModel[datetime]):
    root: datetime


class InstanceType(RootModel[str]):
    root: str = Field(..., description='The instance type.')


class InstanceTypeItem(BaseModel):
    InstanceType_1: Optional[InstanceType] = Field(None, alias='InstanceType')


class InstanceTypeListDefinition(RootModel[List[InstanceTypeItem]]):
    root: List[InstanceTypeItem] = Field(
        ..., description='Information about the instance types.'
    )


class InternalServerException(RootModel[Any]):
    root: Any


class LifeCycleStatus(
    RootModel[constr(pattern=r'^[ A-Za-z]+$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^[ A-Za-z]+$', min_length=1, max_length=20) = Field(
        ..., description='The life cycle status.'
    )


class LifeCycleStatusList(RootModel[List[LifeCycleStatus]]):
    root: List[LifeCycleStatus] = Field(..., max_length=5, min_length=1)


class LineItemId(RootModel[constr(pattern=r'ooi-[a-f0-9]{17}')]):
    root: constr(pattern=r'ooi-[a-f0-9]{17}')


class LineItemQuantity(RootModel[conint(ge=1, le=20)]):
    root: conint(ge=1, le=20)


class LineItemStatus(Enum):
    PREPARING = 'PREPARING'
    BUILDING = 'BUILDING'
    SHIPPED = 'SHIPPED'
    DELIVERED = 'DELIVERED'
    INSTALLING = 'INSTALLING'
    INSTALLED = 'INSTALLED'
    ERROR = 'ERROR'
    CANCELLED = 'CANCELLED'
    REPLACED = 'REPLACED'


class LineItemStatusCounts(RootModel[Optional[Dict[str, LineItemQuantity]]]):
    root: Optional[Dict[str, LineItemQuantity]] = None


class ListAssetsInput(BaseModel):
    pass


class ListCatalogItemsInput(BaseModel):
    pass


class ListOrdersInput(BaseModel):
    pass


class ListOutpostsInput(BaseModel):
    pass


class ListSitesInput(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class MacAddress(
    RootModel[
        constr(
            pattern=r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$',
            min_length=17,
            max_length=17,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$',
        min_length=17,
        max_length=17,
    )


class MacAddressList(RootModel[List[MacAddress]]):
    root: List[MacAddress]


class MaxResults1000(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000) = Field(..., description='The maximum page size.')


class MaxSize(RootModel[str]):
    root: str


class MaximumSupportedWeightLbs(Enum):
    NO_LIMIT = 'NO_LIMIT'
    MAX_1400_LBS = 'MAX_1400_LBS'
    MAX_1600_LBS = 'MAX_1600_LBS'
    MAX_1800_LBS = 'MAX_1800_LBS'
    MAX_2000_LBS = 'MAX_2000_LBS'


class Municipality(
    RootModel[constr(pattern=r'^\S[\S ]*$', min_length=0, max_length=180)]
):
    root: constr(pattern=r'^\S[\S ]*$', min_length=0, max_length=180)


class NetworkInterfaceDeviceIndex(RootModel[conint(ge=0, le=1)]):
    root: conint(ge=0, le=1)


class NotFoundException(RootModel[Any]):
    root: Any


class OpticalStandard(Enum):
    OPTIC_10GBASE_SR = 'OPTIC_10GBASE_SR'
    OPTIC_10GBASE_IR = 'OPTIC_10GBASE_IR'
    OPTIC_10GBASE_LR = 'OPTIC_10GBASE_LR'
    OPTIC_40GBASE_SR = 'OPTIC_40GBASE_SR'
    OPTIC_40GBASE_ESR = 'OPTIC_40GBASE_ESR'
    OPTIC_40GBASE_IR4_LR4L = 'OPTIC_40GBASE_IR4_LR4L'
    OPTIC_40GBASE_LR4 = 'OPTIC_40GBASE_LR4'
    OPTIC_100GBASE_SR4 = 'OPTIC_100GBASE_SR4'
    OPTIC_100GBASE_CWDM4 = 'OPTIC_100GBASE_CWDM4'
    OPTIC_100GBASE_LR4 = 'OPTIC_100GBASE_LR4'
    OPTIC_100G_PSM4_MSA = 'OPTIC_100G_PSM4_MSA'
    OPTIC_1000BASE_LX = 'OPTIC_1000BASE_LX'
    OPTIC_1000BASE_SX = 'OPTIC_1000BASE_SX'


class OrderId(
    RootModel[constr(pattern=r'oo-[a-f0-9]{17}$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'oo-[a-f0-9]{17}$', min_length=1, max_length=20)


class OrderStatus(Enum):
    RECEIVED = 'RECEIVED'
    PENDING = 'PENDING'
    PROCESSING = 'PROCESSING'
    INSTALLING = 'INSTALLING'
    FULFILLED = 'FULFILLED'
    CANCELLED = 'CANCELLED'
    PREPARING = 'PREPARING'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    ERROR = 'ERROR'


class OrderType(Enum):
    OUTPOST = 'OUTPOST'
    REPLACEMENT = 'REPLACEMENT'


class OutpostArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/op-[a-f0-9]{17}$',
        min_length=1,
        max_length=255,
    ) = Field(..., description='The Amazon Resource Name (ARN) of the Outpost.')


class OutpostDescription(
    RootModel[constr(pattern=r'^[\S ]*$', min_length=0, max_length=1000)]
):
    root: constr(pattern=r'^[\S ]*$', min_length=0, max_length=1000) = Field(
        ..., description='The description of the Outpost.'
    )


class OutpostId(
    RootModel[
        constr(
            pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$',
            min_length=1,
            max_length=180,
        )
    ]
):
    root: constr(
        pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$',
        min_length=1,
        max_length=180,
    )


class OutpostIdOnly(
    RootModel[constr(pattern=r'^op-[a-f0-9]{17}$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^op-[a-f0-9]{17}$', min_length=1, max_length=20)


class OutpostIdentifier(
    RootModel[
        constr(
            pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$',
            min_length=1,
            max_length=180,
        )
    ]
):
    root: constr(
        pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$',
        min_length=1,
        max_length=180,
    )


class OutpostName(RootModel[constr(pattern=r'^[\S ]+$', min_length=1, max_length=255)]):
    root: constr(pattern=r'^[\S ]+$', min_length=1, max_length=255) = Field(
        ..., description='The name of the Outpost.'
    )


class OwnerId(RootModel[constr(pattern=r'\d{12}', min_length=12, max_length=12)]):
    root: constr(pattern=r'\d{12}', min_length=12, max_length=12) = Field(
        ..., description='The Amazon Web Services account ID of the Outpost owner.'
    )


class PaymentOption(Enum):
    ALL_UPFRONT = 'ALL_UPFRONT'
    NO_UPFRONT = 'NO_UPFRONT'
    PARTIAL_UPFRONT = 'PARTIAL_UPFRONT'


class PaymentTerm(Enum):
    THREE_YEARS = 'THREE_YEARS'
    ONE_YEAR = 'ONE_YEAR'


class PostalCode(
    RootModel[constr(pattern=r'^[a-zA-Z0-9 -]+$', min_length=1, max_length=20)]
):
    root: constr(pattern=r'^[a-zA-Z0-9 -]+$', min_length=1, max_length=20)


class PowerConnector(Enum):
    L6_30P = 'L6_30P'
    IEC309 = 'IEC309'
    AH530P7W = 'AH530P7W'
    AH532P6W = 'AH532P6W'


class PowerDrawKva(Enum):
    POWER_5_KVA = 'POWER_5_KVA'
    POWER_10_KVA = 'POWER_10_KVA'
    POWER_15_KVA = 'POWER_15_KVA'
    POWER_30_KVA = 'POWER_30_KVA'


class PowerFeedDrop(Enum):
    ABOVE_RACK = 'ABOVE_RACK'
    BELOW_RACK = 'BELOW_RACK'


class PowerPhase(Enum):
    SINGLE_PHASE = 'SINGLE_PHASE'
    THREE_PHASE = 'THREE_PHASE'


class Quantity(RootModel[str]):
    root: str


class RackElevation(RootModel[confloat(ge=0.0, le=99.0)]):
    root: confloat(ge=0.0, le=99.0)


class RackId(RootModel[constr(pattern=r'^[\S \n]+$', min_length=5, max_length=20)]):
    root: constr(pattern=r'^[\S \n]+$', min_length=5, max_length=20)


class ServerEndpoint(
    RootModel[
        constr(
            pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{1,5}$',
            min_length=9,
            max_length=21,
        )
    ]
):
    root: constr(
        pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}:[0-9]{1,5}$', min_length=9, max_length=21
    )


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class ShipmentCarrier(Enum):
    DHL = 'DHL'
    DBS = 'DBS'
    FEDEX = 'FEDEX'
    UPS = 'UPS'


class SiteArn(
    RootModel[
        constr(
            pattern=r'^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/(os-[a-f0-9]{17})$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/(os-[a-f0-9]{17})$',
        min_length=1,
        max_length=255,
    ) = Field(..., description='The Amazon Resource Name (ARN) of the site.')


class SiteDescription(
    RootModel[constr(pattern=r'^[\S ]+$', min_length=1, max_length=1001)]
):
    root: constr(pattern=r'^[\S ]+$', min_length=1, max_length=1001) = Field(
        ..., description='The description of the site.'
    )


class SiteId(
    RootModel[
        constr(
            pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$',
            min_length=1,
            max_length=255,
        )
    ]
):
    root: constr(
        pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$',
        min_length=1,
        max_length=255,
    ) = Field(..., description='The ID of the site.')


class SiteName(RootModel[constr(pattern=r'^[\S ]+$', min_length=1, max_length=1000)]):
    root: constr(pattern=r'^[\S ]+$', min_length=1, max_length=1000) = Field(
        ..., description='The name of the site.'
    )


class SiteNotes(
    RootModel[constr(pattern=r'^[\S \n]+$', min_length=1, max_length=2000)]
):
    root: constr(pattern=r'^[\S \n]+$', min_length=1, max_length=2000)


class SkuCode(
    RootModel[constr(pattern=r'OR-[A-Z0-9]{7}', min_length=1, max_length=10)]
):
    root: constr(pattern=r'OR-[A-Z0-9]{7}', min_length=1, max_length=10)


class StateOrRegion(
    RootModel[constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=50)]
):
    root: constr(pattern=r'^\S[\S ]*$', min_length=1, max_length=50)


class StateOrRegionList(RootModel[List[StateOrRegion]]):
    root: List[StateOrRegion]


class StatusList(RootModel[List[AssetState]]):
    root: List[AssetState] = Field(..., max_length=2, min_length=1)


class SupportedHardwareType(Enum):
    RACK = 'RACK'
    SERVER = 'SERVER'


class SupportedStorageEnum(Enum):
    EBS = 'EBS'
    S3 = 'S3'


class SupportedStorageList(RootModel[List[SupportedStorageEnum]]):
    root: List[SupportedStorageEnum]


class SupportedUplinkGbps(RootModel[int]):
    root: int


class SupportedUplinkGbpsListDefinition(RootModel[List[SupportedUplinkGbps]]):
    root: List[SupportedUplinkGbps]


class TagKey(
    RootModel[
        constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(pattern=r'^(?!aws:)[a-zA-Z+-=._:/]+$', min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(pattern=r'^[\S \n]+$', max_length=256)]):
    root: constr(pattern=r'^[\S \n]+$', max_length=256)


class Token(
    RootModel[constr(pattern=r'^(\d+)##(\S+)$', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'^(\d+)##(\S+)$', min_length=1, max_length=2048) = Field(
        ..., description='The pagination token.'
    )


class TrackingId(
    RootModel[constr(pattern=r'^[a-zA-Z0-9]+$', min_length=6, max_length=42)]
):
    root: constr(pattern=r'^[a-zA-Z0-9]+$', min_length=6, max_length=42)


class UnderlayIpAddress(
    RootModel[
        constr(pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}$', min_length=7, max_length=15)
    ]
):
    root: constr(pattern=r'^([0-9]{1,3}\.){3}[0-9]{1,3}$', min_length=7, max_length=15)


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateOutpostInput(BaseModel):
    Description: Optional[OutpostDescription] = None
    Name: Optional[OutpostName] = None
    SupportedHardwareType_1: Optional[SupportedHardwareType] = Field(
        None, alias='SupportedHardwareType'
    )


class UpdateSiteInput(BaseModel):
    Description: Optional[SiteDescription] = None
    Name: Optional[SiteName] = None
    Notes: Optional[SiteNotes] = None


class UplinkCount(Enum):
    UPLINK_COUNT_1 = 'UPLINK_COUNT_1'
    UPLINK_COUNT_2 = 'UPLINK_COUNT_2'
    UPLINK_COUNT_3 = 'UPLINK_COUNT_3'
    UPLINK_COUNT_4 = 'UPLINK_COUNT_4'
    UPLINK_COUNT_5 = 'UPLINK_COUNT_5'
    UPLINK_COUNT_6 = 'UPLINK_COUNT_6'
    UPLINK_COUNT_7 = 'UPLINK_COUNT_7'
    UPLINK_COUNT_8 = 'UPLINK_COUNT_8'
    UPLINK_COUNT_12 = 'UPLINK_COUNT_12'
    UPLINK_COUNT_16 = 'UPLINK_COUNT_16'


class UplinkGbps(Enum):
    UPLINK_1G = 'UPLINK_1G'
    UPLINK_10G = 'UPLINK_10G'
    UPLINK_40G = 'UPLINK_40G'
    UPLINK_100G = 'UPLINK_100G'


class ValidationException(RootModel[Any]):
    root: Any


class WireGuardPublicKey(
    RootModel[constr(pattern=r'^[a-zA-Z0-9/+]{43}=$', min_length=44, max_length=44)]
):
    root: constr(pattern=r'^[a-zA-Z0-9/+]{43}=$', min_length=44, max_length=44)


class ItemClassFilter(RootModel[List[CatalogItemClass]]):
    root: List[CatalogItemClass]


class SupportedStorageFilter(RootModel[List[SupportedStorageEnum]]):
    root: List[SupportedStorageEnum]


class EC2FamilyFilter(RootModel[List[Family]]):
    root: List[Family]


class ConnectionsPostRequest(BaseModel):
    AssetId: constr(pattern=r'^(\w+)$', min_length=1, max_length=100) = Field(
        ..., description=' The ID of the Outpost server. '
    )
    ClientPublicKey: constr(
        pattern=r'^[a-zA-Z0-9/+]{43}=$', min_length=44, max_length=44
    ) = Field(..., description=' The public key of the client. ')
    DeviceSerialNumber: constr(pattern=r'^(\w+)$', min_length=1, max_length=100) = (
        Field(..., description=' The serial number of the dongle. ')
    )
    NetworkInterfaceDeviceIndex: conint(ge=0, le=1) = Field(
        ...,
        description=' The device index of the network interface on the Outpost server. ',
    )


class LifeCycleStatusFilter(RootModel[List[LifeCycleStatus]]):
    root: List[LifeCycleStatus] = Field(..., max_length=5, min_length=1)


class AvailabilityZoneFilter(RootModel[List[AvailabilityZone]]):
    root: List[AvailabilityZone] = Field(..., max_length=5, min_length=1)


class AvailabilityZoneIdFilter(RootModel[List[AvailabilityZoneId]]):
    root: List[AvailabilityZoneId] = Field(..., max_length=5, min_length=1)


class OutpostsPostRequest(BaseModel):
    AvailabilityZone: Optional[
        constr(
            pattern=r'^([a-zA-Z]+-){1,3}([a-zA-Z]+)?(\d+[a-zA-Z]?)?$',
            min_length=1,
            max_length=1000,
        )
    ] = Field(None, description='The Availability Zone.')
    AvailabilityZoneId: Optional[
        constr(pattern=r'^[a-zA-Z]+\d-[a-zA-Z]+\d$', min_length=1, max_length=255)
    ] = Field(None, description='The ID of the Availability Zone.')
    Description: Optional[
        constr(pattern=r'^[\S ]*$', min_length=0, max_length=1000)
    ] = Field(None, description='The description of the Outpost.')
    Name: constr(pattern=r'^[\S ]+$', min_length=1, max_length=255) = Field(
        ..., description='The name of the Outpost.'
    )
    SiteId: constr(
        pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:site/)?(os-[a-f0-9]{17})$',
        min_length=1,
        max_length=255,
    ) = Field(..., description='The ID of the site.')
    SupportedHardwareType_1: Optional[SupportedHardwareType] = Field(
        None,
        alias='SupportedHardwareType',
        description=' The type of hardware for this Outpost. ',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description='The tags to apply to the Outpost.'
    )


class OutpostsOutpostIdPatchRequest(BaseModel):
    Description: Optional[
        constr(pattern=r'^[\S ]*$', min_length=0, max_length=1000)
    ] = Field(None, description='The description of the Outpost.')
    Name: Optional[constr(pattern=r'^[\S ]+$', min_length=1, max_length=255)] = Field(
        None, description='The name of the Outpost.'
    )
    SupportedHardwareType_1: Optional[SupportedHardwareType] = Field(
        None,
        alias='SupportedHardwareType',
        description=' The type of hardware for this Outpost. ',
    )


class HostIdFilter(RootModel[List[HostId]]):
    root: List[HostId]


class StatusFilter(RootModel[List[AssetState]]):
    root: List[AssetState] = Field(..., max_length=2, min_length=1)


class OperatingAddressCountryCodeFilter(RootModel[List[CountryCode]]):
    root: List[CountryCode]


class OperatingAddressStateOrRegionFilter(RootModel[List[StateOrRegion]]):
    root: List[StateOrRegion]


class OperatingAddressCityFilter(RootModel[List[City]]):
    root: List[City]


class OperatingAddress(BaseModel):
    AddressLine1_1: Optional[AddressLine1] = Field(None, alias='AddressLine1')
    AddressLine2_1: Optional[AddressLine2] = Field(None, alias='AddressLine2')
    AddressLine3_1: Optional[AddressLine3] = Field(None, alias='AddressLine3')
    City_1: Optional[City] = Field(None, alias='City')
    ContactName_1: Optional[ContactName] = Field(None, alias='ContactName')
    ContactPhoneNumber_1: Optional[ContactPhoneNumber] = Field(
        None, alias='ContactPhoneNumber'
    )
    CountryCode_1: Optional[CountryCode] = Field(None, alias='CountryCode')
    DistrictOrCounty_1: Optional[DistrictOrCounty] = Field(
        None, alias='DistrictOrCounty'
    )
    Municipality_1: Optional[Municipality] = Field(None, alias='Municipality')
    PostalCode_1: Optional[PostalCode] = Field(None, alias='PostalCode')
    StateOrRegion_1: Optional[StateOrRegion] = Field(None, alias='StateOrRegion')


class RackPhysicalProperties(BaseModel):
    FiberOpticCableType_1: Optional[FiberOpticCableType] = Field(
        None, alias='FiberOpticCableType'
    )
    MaximumSupportedWeightLbs_1: Optional[MaximumSupportedWeightLbs] = Field(
        None, alias='MaximumSupportedWeightLbs'
    )
    OpticalStandard_1: Optional[OpticalStandard] = Field(None, alias='OpticalStandard')
    PowerConnector_1: Optional[PowerConnector] = Field(None, alias='PowerConnector')
    PowerDrawKva_1: Optional[PowerDrawKva] = Field(None, alias='PowerDrawKva')
    PowerFeedDrop_1: Optional[PowerFeedDrop] = Field(None, alias='PowerFeedDrop')
    PowerPhase_1: Optional[PowerPhase] = Field(None, alias='PowerPhase')
    UplinkCount_1: Optional[UplinkCount] = Field(None, alias='UplinkCount')
    UplinkGbps_1: Optional[UplinkGbps] = Field(None, alias='UplinkGbps')


class ShippingAddress(BaseModel):
    AddressLine1_1: Optional[AddressLine1] = Field(None, alias='AddressLine1')
    AddressLine2_1: Optional[AddressLine2] = Field(None, alias='AddressLine2')
    AddressLine3_1: Optional[AddressLine3] = Field(None, alias='AddressLine3')
    City_1: Optional[City] = Field(None, alias='City')
    ContactName_1: Optional[ContactName] = Field(None, alias='ContactName')
    ContactPhoneNumber_1: Optional[ContactPhoneNumber] = Field(
        None, alias='ContactPhoneNumber'
    )
    CountryCode_1: Optional[CountryCode] = Field(None, alias='CountryCode')
    DistrictOrCounty_1: Optional[DistrictOrCounty] = Field(
        None, alias='DistrictOrCounty'
    )
    Municipality_1: Optional[Municipality] = Field(None, alias='Municipality')
    PostalCode_1: Optional[PostalCode] = Field(None, alias='PostalCode')
    StateOrRegion_1: Optional[StateOrRegion] = Field(None, alias='StateOrRegion')


class SitesPostRequest(BaseModel):
    Description: Optional[
        constr(pattern=r'^[\S ]+$', min_length=1, max_length=1001)
    ] = Field(None, description='The description of the site.')
    Name: constr(pattern=r'^[\S ]+$', min_length=1, max_length=1000) = Field(
        ..., description='The name of the site.'
    )
    Notes: Optional[constr(pattern=r'^[\S \n]+$', min_length=1, max_length=2000)] = (
        Field(
            None,
            description='Additional information that you provide about site access requirements, electrician scheduling, personal protective equipment, or regulation of equipment materials that could affect your installation process. ',
        )
    )
    OperatingAddress_1: Optional[OperatingAddress] = Field(
        None, alias='OperatingAddress', description=' Information about an address. '
    )
    RackPhysicalProperties_1: Optional[RackPhysicalProperties] = Field(
        None,
        alias='RackPhysicalProperties',
        description=' Information about the physical and logistical details for racks at sites. For more information about hardware requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#checklist">Network readiness checklist</a> in the Amazon Web Services Outposts User Guide. ',
    )
    ShippingAddress_1: Optional[ShippingAddress] = Field(
        None, alias='ShippingAddress', description=' Information about an address. '
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None, description=' The tags to apply to a site. '
    )


class SitesSiteIdPatchRequest(BaseModel):
    Description: Optional[
        constr(pattern=r'^[\S ]+$', min_length=1, max_length=1001)
    ] = Field(None, description='The description of the site.')
    Name: Optional[constr(pattern=r'^[\S ]+$', min_length=1, max_length=1000)] = Field(
        None, description='The name of the site.'
    )
    Notes: Optional[constr(pattern=r'^[\S \n]+$', min_length=1, max_length=2000)] = (
        Field(None, description='Notes about a site.')
    )


class Address1(BaseModel):
    AddressLine1_1: Optional[AddressLine1] = Field(None, alias='AddressLine1')
    AddressLine2_1: Optional[AddressLine2] = Field(None, alias='AddressLine2')
    AddressLine3_1: Optional[AddressLine3] = Field(None, alias='AddressLine3')
    City_1: Optional[City] = Field(None, alias='City')
    ContactName_1: Optional[ContactName] = Field(None, alias='ContactName')
    ContactPhoneNumber_1: Optional[ContactPhoneNumber] = Field(
        None, alias='ContactPhoneNumber'
    )
    CountryCode_1: Optional[CountryCode] = Field(None, alias='CountryCode')
    DistrictOrCounty_1: Optional[DistrictOrCounty] = Field(
        None, alias='DistrictOrCounty'
    )
    Municipality_1: Optional[Municipality] = Field(None, alias='Municipality')
    PostalCode_1: Optional[PostalCode] = Field(None, alias='PostalCode')
    StateOrRegion_1: Optional[StateOrRegion] = Field(None, alias='StateOrRegion')


class SitesSiteIdAddressPutRequest(BaseModel):
    Address: Address1 = Field(..., description=' Information about an address. ')
    AddressType_1: AddressType = Field(
        ..., alias='AddressType', description=' The type of the address. '
    )


class SitesSiteIdRackPhysicalPropertiesPatchRequest(BaseModel):
    FiberOpticCableType_1: Optional[FiberOpticCableType] = Field(
        None,
        alias='FiberOpticCableType',
        description='The type of fiber that you will use to attach the Outpost to your network. ',
    )
    MaximumSupportedWeightLbs_1: Optional[MaximumSupportedWeightLbs] = Field(
        None,
        alias='MaximumSupportedWeightLbs',
        description='The maximum rack weight that this site can support. <code>NO_LIMIT</code> is over 2000lbs. ',
    )
    OpticalStandard_1: Optional[OpticalStandard] = Field(
        None,
        alias='OpticalStandard',
        description='<p>The type of optical standard that you will use to attach the Outpost to your network. This field is dependent on uplink speed, fiber type, and distance to the upstream device. For more information about networking requirements for racks, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-requirements.html#facility-networking">Network</a> in the Amazon Web Services Outposts User Guide. </p> <ul> <li> <p> <code>OPTIC_10GBASE_SR</code>: 10GBASE-SR</p> </li> <li> <p> <code>OPTIC_10GBASE_IR</code>: 10GBASE-IR</p> </li> <li> <p> <code>OPTIC_10GBASE_LR</code>: 10GBASE-LR</p> </li> <li> <p> <code>OPTIC_40GBASE_SR</code>: 40GBASE-SR</p> </li> <li> <p> <code>OPTIC_40GBASE_ESR</code>: 40GBASE-ESR</p> </li> <li> <p> <code>OPTIC_40GBASE_IR4_LR4L</code>: 40GBASE-IR (LR4L)</p> </li> <li> <p> <code>OPTIC_40GBASE_LR4</code>: 40GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100GBASE_SR4</code>: 100GBASE-SR4</p> </li> <li> <p> <code>OPTIC_100GBASE_CWDM4</code>: 100GBASE-CWDM4</p> </li> <li> <p> <code>OPTIC_100GBASE_LR4</code>: 100GBASE-LR4</p> </li> <li> <p> <code>OPTIC_100G_PSM4_MSA</code>: 100G PSM4 MSA</p> </li> <li> <p> <code>OPTIC_1000BASE_LX</code>: 1000Base-LX</p> </li> <li> <p> <code>OPTIC_1000BASE_SX</code> : 1000Base-SX</p> </li> </ul>',
    )
    PowerConnector_1: Optional[PowerConnector] = Field(
        None,
        alias='PowerConnector',
        description='<p>The power connector that Amazon Web Services should plan to provide for connections to the hardware. Note the correlation between <code>PowerPhase</code> and <code>PowerConnector</code>. </p> <ul> <li> <p>Single-phase AC feed</p> <ul> <li> <p> <b>L6-30P</b> – (common in US); 30A; single phase</p> </li> <li> <p> <b>IEC309 (blue)</b> – P+N+E, 6hr; 32 A; single phase</p> </li> </ul> </li> <li> <p>Three-phase AC feed</p> <ul> <li> <p> <b>AH530P7W (red)</b> – 3P+N+E, 7hr; 30A; three phase</p> </li> <li> <p> <b>AH532P6W (red)</b> – 3P+N+E, 6hr; 32A; three phase</p> </li> </ul> </li> </ul>',
    )
    PowerDrawKva_1: Optional[PowerDrawKva] = Field(
        None,
        alias='PowerDrawKva',
        description='The power draw, in kVA, available at the hardware placement position for the rack.',
    )
    PowerFeedDrop_1: Optional[PowerFeedDrop] = Field(
        None,
        alias='PowerFeedDrop',
        description='Indicates whether the power feed comes above or below the rack. ',
    )
    PowerPhase_1: Optional[PowerPhase] = Field(
        None,
        alias='PowerPhase',
        description='<p>The power option that you can provide for hardware. </p> <ul> <li> <p>Single-phase AC feed: 200 V to 277 V, 50 Hz or 60 Hz</p> </li> <li> <p>Three-phase AC feed: 346 V to 480 V, 50 Hz or 60 Hz</p> </li> </ul>',
    )
    UplinkCount_1: Optional[UplinkCount] = Field(
        None,
        alias='UplinkCount',
        description='<p>Racks come with two Outpost network devices. Depending on the supported uplink speed at the site, the Outpost network devices provide a variable number of uplinks. Specify the number of uplinks for each Outpost network device that you intend to use to connect the rack to your network. Note the correlation between <code>UplinkGbps</code> and <code>UplinkCount</code>. </p> <ul> <li> <p>1Gbps - Uplinks available: 1, 2, 4, 6, 8</p> </li> <li> <p>10Gbps - Uplinks available: 1, 2, 4, 8, 12, 16</p> </li> <li> <p>40 and 100 Gbps- Uplinks available: 1, 2, 4</p> </li> </ul>',
    )
    UplinkGbps_1: Optional[UplinkGbps] = Field(
        None,
        alias='UplinkGbps',
        description='The uplink speed the rack should support for the connection to the Region. ',
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ..., description='The tags to add to the resource.'
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class Address(BaseModel):
    AddressLine1_1: AddressLine1 = Field(..., alias='AddressLine1')
    AddressLine2_1: Optional[AddressLine2] = Field(None, alias='AddressLine2')
    AddressLine3_1: Optional[AddressLine3] = Field(None, alias='AddressLine3')
    City_1: City = Field(..., alias='City')
    ContactName_1: Optional[ContactName] = Field(None, alias='ContactName')
    ContactPhoneNumber_1: Optional[ContactPhoneNumber] = Field(
        None, alias='ContactPhoneNumber'
    )
    CountryCode_1: CountryCode = Field(..., alias='CountryCode')
    DistrictOrCounty_1: Optional[DistrictOrCounty] = Field(
        None, alias='DistrictOrCounty'
    )
    Municipality_1: Optional[Municipality] = Field(None, alias='Municipality')
    PostalCode_1: PostalCode = Field(..., alias='PostalCode')
    StateOrRegion_1: StateOrRegion = Field(..., alias='StateOrRegion')


class AssetLocation(BaseModel):
    RackElevation_1: Optional[RackElevation] = Field(None, alias='RackElevation')


class ComputeAttributes(BaseModel):
    HostId_1: Optional[HostId] = Field(None, alias='HostId')
    State: Optional[ComputeAssetState] = None


class ConnectionDetails(BaseModel):
    AllowedIps: Optional[CIDRList] = None
    ClientPublicKey: Optional[WireGuardPublicKey] = None
    ClientTunnelAddress: Optional[CIDR] = None
    ServerEndpoint_1: Optional[ServerEndpoint] = Field(None, alias='ServerEndpoint')
    ServerPublicKey: Optional[WireGuardPublicKey] = None
    ServerTunnelAddress: Optional[CIDR] = None


class EC2Capacity(BaseModel):
    Family_1: Optional[Family] = Field(None, alias='Family')
    MaxSize_1: Optional[MaxSize] = Field(None, alias='MaxSize')
    Quantity_1: Optional[Quantity] = Field(None, alias='Quantity')


class EC2CapacityListDefinition(RootModel[List[EC2Capacity]]):
    root: List[EC2Capacity]


class EC2FamilyList(RootModel[List[Family]]):
    root: List[Family]


class GetConnectionResponse(BaseModel):
    ConnectionDetails_1: Optional[ConnectionDetails] = Field(
        None, alias='ConnectionDetails'
    )
    ConnectionId_1: Optional[ConnectionId] = Field(None, alias='ConnectionId')


class GetOutpostInstanceTypesOutput(BaseModel):
    InstanceTypes: Optional[InstanceTypeListDefinition] = None
    NextToken: Optional[Token] = None
    OutpostArn_1: Optional[OutpostArn] = Field(None, alias='OutpostArn')
    OutpostId_1: Optional[OutpostId] = Field(None, alias='OutpostId')


class GetSiteAddressOutput(BaseModel):
    Address_1: Optional[Address] = Field(None, alias='Address')
    AddressType_1: Optional[AddressType] = Field(None, alias='AddressType')
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')


class LineItemAssetInformation(BaseModel):
    AssetId_1: Optional[AssetId] = Field(None, alias='AssetId')
    MacAddressList_1: Optional[MacAddressList] = Field(None, alias='MacAddressList')


class LineItemAssetInformationList(RootModel[List[LineItemAssetInformation]]):
    root: List[LineItemAssetInformation]


class LineItemRequest(BaseModel):
    CatalogItemId: Optional[SkuCode] = None
    Quantity: Optional[LineItemQuantity] = None


class LineItemRequestListDefinition(RootModel[List[LineItemRequest]]):
    root: List[LineItemRequest] = Field(..., max_length=20, min_length=1)


class OrderSummary(BaseModel):
    LineItemCountsByStatus: Optional[LineItemStatusCounts] = None
    OrderFulfilledDate: Optional[ISO8601Timestamp] = None
    OrderId_1: Optional[OrderId] = Field(None, alias='OrderId')
    OrderSubmissionDate: Optional[ISO8601Timestamp] = None
    OrderType_1: Optional[OrderType] = Field(None, alias='OrderType')
    OutpostId: Optional[OutpostIdOnly] = None
    Status: Optional[OrderStatus] = None


class OrderSummaryListDefinition(RootModel[List[OrderSummary]]):
    root: List[OrderSummary]


class ShipmentInformation(BaseModel):
    ShipmentCarrier_1: Optional[ShipmentCarrier] = Field(None, alias='ShipmentCarrier')
    ShipmentTrackingNumber: Optional[TrackingId] = None


class StartConnectionRequest(BaseModel):
    AssetId_1: AssetId = Field(..., alias='AssetId')
    ClientPublicKey: WireGuardPublicKey
    DeviceSerialNumber_1: DeviceSerialNumber = Field(..., alias='DeviceSerialNumber')
    NetworkInterfaceDeviceIndex_1: NetworkInterfaceDeviceIndex = Field(
        ..., alias='NetworkInterfaceDeviceIndex'
    )


class StartConnectionResponse(BaseModel):
    ConnectionId_1: Optional[ConnectionId] = Field(None, alias='ConnectionId')
    UnderlayIpAddress_1: Optional[UnderlayIpAddress] = Field(
        None, alias='UnderlayIpAddress'
    )


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class UpdateSiteAddressInput(BaseModel):
    Address_1: Address = Field(..., alias='Address')
    AddressType_1: AddressType = Field(..., alias='AddressType')


class UpdateSiteAddressOutput(BaseModel):
    Address_1: Optional[Address] = Field(None, alias='Address')
    AddressType_1: Optional[AddressType] = Field(None, alias='AddressType')


class UpdateSiteRackPhysicalPropertiesInput(BaseModel):
    FiberOpticCableType_1: Optional[FiberOpticCableType] = Field(
        None, alias='FiberOpticCableType'
    )
    MaximumSupportedWeightLbs_1: Optional[MaximumSupportedWeightLbs] = Field(
        None, alias='MaximumSupportedWeightLbs'
    )
    OpticalStandard_1: Optional[OpticalStandard] = Field(None, alias='OpticalStandard')
    PowerConnector_1: Optional[PowerConnector] = Field(None, alias='PowerConnector')
    PowerDrawKva_1: Optional[PowerDrawKva] = Field(None, alias='PowerDrawKva')
    PowerFeedDrop_1: Optional[PowerFeedDrop] = Field(None, alias='PowerFeedDrop')
    PowerPhase_1: Optional[PowerPhase] = Field(None, alias='PowerPhase')
    UplinkCount_1: Optional[UplinkCount] = Field(None, alias='UplinkCount')
    UplinkGbps_1: Optional[UplinkGbps] = Field(None, alias='UplinkGbps')


class OrdersPostRequest(BaseModel):
    LineItems: List[LineItemRequest] = Field(
        ...,
        description='The line items that make up the order.',
        max_length=20,
        min_length=1,
    )
    OutpostIdentifier: constr(
        pattern=r'^(arn:aws([a-z-]+)?:outposts:[a-z\d-]+:\d{12}:outpost/)?op-[a-f0-9]{17}$',
        min_length=1,
        max_length=180,
    ) = Field(
        ..., description=' The ID or the Amazon Resource Name (ARN) of the Outpost. '
    )
    PaymentOption_1: PaymentOption = Field(
        ..., alias='PaymentOption', description='The payment option.'
    )
    PaymentTerm_1: Optional[PaymentTerm] = Field(
        None, alias='PaymentTerm', description='The payment terms.'
    )


class AssetInfo(BaseModel):
    AssetId_1: Optional[AssetId] = Field(None, alias='AssetId')
    AssetLocation_1: Optional[AssetLocation] = Field(None, alias='AssetLocation')
    AssetType_1: Optional[AssetType] = Field(None, alias='AssetType')
    ComputeAttributes_1: Optional[ComputeAttributes] = Field(
        None, alias='ComputeAttributes'
    )
    RackId_1: Optional[RackId] = Field(None, alias='RackId')


class AssetListDefinition(RootModel[List[AssetInfo]]):
    root: List[AssetInfo]


class CatalogItem(BaseModel):
    CatalogItemId: Optional[SkuCode] = None
    EC2Capacities: Optional[EC2CapacityListDefinition] = None
    ItemStatus: Optional[CatalogItemStatus] = None
    PowerKva: Optional[CatalogItemPowerKva] = None
    SupportedStorage: Optional[SupportedStorageList] = None
    SupportedUplinkGbps: Optional[SupportedUplinkGbpsListDefinition] = None
    WeightLbs: Optional[CatalogItemWeightLbs] = None


class CatalogItemListDefinition(RootModel[List[CatalogItem]]):
    root: List[CatalogItem]


class CreateOrderInput(BaseModel):
    LineItems: LineItemRequestListDefinition
    OutpostIdentifier_1: OutpostIdentifier = Field(..., alias='OutpostIdentifier')
    PaymentOption_1: PaymentOption = Field(..., alias='PaymentOption')
    PaymentTerm_1: Optional[PaymentTerm] = Field(None, alias='PaymentTerm')


class CreateOutpostInput(BaseModel):
    AvailabilityZone_1: Optional[AvailabilityZone] = Field(
        None, alias='AvailabilityZone'
    )
    AvailabilityZoneId_1: Optional[AvailabilityZoneId] = Field(
        None, alias='AvailabilityZoneId'
    )
    Description: Optional[OutpostDescription] = None
    Name: OutpostName
    SiteId_1: SiteId = Field(..., alias='SiteId')
    SupportedHardwareType_1: Optional[SupportedHardwareType] = Field(
        None, alias='SupportedHardwareType'
    )
    Tags: Optional[TagMap] = None


class CreateSiteInput(BaseModel):
    Description: Optional[SiteDescription] = None
    Name: SiteName
    Notes: Optional[SiteNotes] = None
    OperatingAddress: Optional[Address] = None
    RackPhysicalProperties_1: Optional[RackPhysicalProperties] = Field(
        None, alias='RackPhysicalProperties'
    )
    ShippingAddress: Optional[Address] = None
    Tags: Optional[TagMap] = None


class GetCatalogItemOutput(BaseModel):
    CatalogItem_1: Optional[CatalogItem] = Field(None, alias='CatalogItem')


class LineItem(BaseModel):
    AssetInformationList: Optional[LineItemAssetInformationList] = None
    CatalogItemId: Optional[SkuCode] = None
    LineItemId_1: Optional[LineItemId] = Field(None, alias='LineItemId')
    PreviousLineItemId: Optional[LineItemId] = None
    PreviousOrderId: Optional[OrderId] = None
    Quantity: Optional[LineItemQuantity] = None
    ShipmentInformation_1: Optional[ShipmentInformation] = Field(
        None, alias='ShipmentInformation'
    )
    Status: Optional[LineItemStatus] = None


class LineItemListDefinition(RootModel[List[LineItem]]):
    root: List[LineItem]


class ListAssetsOutput(BaseModel):
    Assets: Optional[AssetListDefinition] = None
    NextToken: Optional[Token] = None


class ListCatalogItemsOutput(BaseModel):
    CatalogItems: Optional[CatalogItemListDefinition] = None
    NextToken: Optional[Token] = None


class ListOrdersOutput(BaseModel):
    NextToken: Optional[Token] = None
    Orders: Optional[OrderSummaryListDefinition] = None


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class Order(BaseModel):
    LineItems: Optional[LineItemListDefinition] = None
    OrderFulfilledDate: Optional[ISO8601Timestamp] = None
    OrderId_1: Optional[OrderId] = Field(None, alias='OrderId')
    OrderSubmissionDate: Optional[ISO8601Timestamp] = None
    OrderType_1: Optional[OrderType] = Field(None, alias='OrderType')
    OutpostId: Optional[OutpostIdOnly] = None
    PaymentOption_1: Optional[PaymentOption] = Field(None, alias='PaymentOption')
    PaymentTerm_1: Optional[PaymentTerm] = Field(None, alias='PaymentTerm')
    Status: Optional[OrderStatus] = None


class Outpost(BaseModel):
    AvailabilityZone_1: Optional[AvailabilityZone] = Field(
        None, alias='AvailabilityZone'
    )
    AvailabilityZoneId_1: Optional[AvailabilityZoneId] = Field(
        None, alias='AvailabilityZoneId'
    )
    Description: Optional[OutpostDescription] = None
    LifeCycleStatus_1: Optional[LifeCycleStatus] = Field(None, alias='LifeCycleStatus')
    Name: Optional[OutpostName] = None
    OutpostArn_1: Optional[OutpostArn] = Field(None, alias='OutpostArn')
    OutpostId_1: Optional[OutpostId] = Field(None, alias='OutpostId')
    OwnerId_1: Optional[OwnerId] = Field(None, alias='OwnerId')
    SiteArn_1: Optional[SiteArn] = Field(None, alias='SiteArn')
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    SupportedHardwareType_1: Optional[SupportedHardwareType] = Field(
        None, alias='SupportedHardwareType'
    )
    Tags: Optional[TagMap] = None


class Site(BaseModel):
    AccountId_1: Optional[AccountId] = Field(None, alias='AccountId')
    Description: Optional[SiteDescription] = None
    Name: Optional[SiteName] = None
    Notes: Optional[SiteNotes] = None
    OperatingAddressCity: Optional[City] = None
    OperatingAddressCountryCode: Optional[CountryCode] = None
    OperatingAddressStateOrRegion: Optional[StateOrRegion] = None
    RackPhysicalProperties_1: Optional[RackPhysicalProperties] = Field(
        None, alias='RackPhysicalProperties'
    )
    SiteArn_1: Optional[SiteArn] = Field(None, alias='SiteArn')
    SiteId_1: Optional[SiteId] = Field(None, alias='SiteId')
    Tags: Optional[TagMap] = None


class UpdateOutpostOutput(BaseModel):
    Outpost_1: Optional[Outpost] = Field(None, alias='Outpost')


class UpdateSiteOutput(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class UpdateSiteRackPhysicalPropertiesOutput(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class OutpostListDefinition(RootModel[List[Outpost]]):
    root: List[Outpost] = Field(..., description='Information about the Outposts.')


class SiteListDefinition(RootModel[List[Site]]):
    root: List[Site] = Field(..., description='Information about the sites.')


class CreateOrderOutput(BaseModel):
    Order_1: Optional[Order] = Field(None, alias='Order')


class CreateOutpostOutput(BaseModel):
    Outpost_1: Optional[Outpost] = Field(None, alias='Outpost')


class CreateSiteOutput(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class GetOrderOutput(BaseModel):
    Order_1: Optional[Order] = Field(None, alias='Order')


class GetOutpostOutput(BaseModel):
    Outpost_1: Optional[Outpost] = Field(None, alias='Outpost')


class GetSiteOutput(BaseModel):
    Site_1: Optional[Site] = Field(None, alias='Site')


class ListOutpostsOutput(BaseModel):
    NextToken: Optional[Token] = None
    Outposts: Optional[OutpostListDefinition] = None


class ListSitesOutput(BaseModel):
    NextToken: Optional[Token] = None
    Sites: Optional[SiteListDefinition] = None
